<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kubernetes 网络隔离</title>
      <link href="2022/08/23/k8s-networkpolicy/"/>
      <url>2022/08/23/k8s-networkpolicy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>设置 POD 的网络访问策略，即 POD 的入网和出网策略。<br>NetworkPolicy 是 K8s 提供 POD 网络隔离能力的资源。（类似于设置网络防火墙规则）</p></blockquote><p>POD 默认的允许所有的入网和出网流量的。如果要限制这一规则，则需要 NetworkPolicy 来指定规则。</p><h4 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/component: prometheus</span><br><span class="line">    app.kubernetes.io/instance: k8s</span><br><span class="line">    app.kubernetes.io/name: prometheus</span><br><span class="line">    app.kubernetes.io/part-of: kube-prometheus</span><br><span class="line">    app.kubernetes.io/version: 2.36.1</span><br><span class="line">  name: prometheus-k8s</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  egress:</span><br><span class="line">  - {}</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app.kubernetes.io/name: prometheus</span><br><span class="line">    ports:</span><br><span class="line">    - port: 9090</span><br><span class="line">      protocol: TCP</span><br><span class="line">    - port: 8080</span><br><span class="line">      protocol: TCP</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app.kubernetes.io/name: grafana</span><br><span class="line">    ports:</span><br><span class="line">    - port: 9090</span><br><span class="line">      protocol: TCP</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/component: prometheus</span><br><span class="line">      app.kubernetes.io/instance: k8s</span><br><span class="line">      app.kubernetes.io/name: prometheus</span><br><span class="line">      app.kubernetes.io/part-of: kube-prometheus</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Egress</span><br><span class="line">  - Ingress</span><br></pre></td></tr></tbody></table></figure><p>spec.podSelector 指定该 NetworkPolicy 资源涉及的 POD 的范围。在 NetworkPolicy 命名空间中的对应的labels的 POD 将会执行上诉配置。<br>spec.podSelector: {} 将会选择所有的 POD。</p><p>ingress 配置 POD 的数据流入的规则。即入网白名单。<br>from 和 port 配置指定 POD 的入网端口。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  ingress:</span><br><span class="line">    # 配置入网的pod</span><br><span class="line">  - from:</span><br><span class="line">    # 配置入网ip地址段</span><br><span class="line">    - ipBlock:</span><br><span class="line">        cidr: 172.17.0.0/16</span><br><span class="line">        # 排除指定的ip地址段</span><br><span class="line">        except:</span><br><span class="line">        - 172.17.1.0/24</span><br><span class="line">    # 配置命名空间下所有的 POD</span><br><span class="line">    - namespaceSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          namespaceLables: namespaceValue</span><br><span class="line">    # 配置命名空间下指定的 POD</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app.kubernetes.io/name: prometheus</span><br><span class="line">    # 指定pod的入网的端口号</span><br><span class="line">    ports:</span><br><span class="line">    - port: 9090</span><br><span class="line">      protocol: TCP</span><br><span class="line">    - port: 8080</span><br><span class="line">      protocol: TCP</span><br></pre></td></tr></tbody></table></figure><p>egress 配置数据的出网规则</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  # 配置哪些pod需要遵循该规则</span><br><span class="line">  egress:</span><br><span class="line">  - to:</span><br><span class="line">    # 配置pod的ip地址段</span><br><span class="line">    - ipBlock:</span><br><span class="line">        cidr: 10.0.0.0/24</span><br><span class="line">    # 配置pod的出网端口号</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 5978</span><br></pre></td></tr></tbody></table></figure><p>policyTypes 配置 NetworkPloicy 规则生效的策略。入网、出网还是入网和出网。</p><h4 id="NetworkPloicy-支持的网络插件"><a href="#NetworkPloicy-支持的网络插件" class="headerlink" title="NetworkPloicy 支持的网络插件"></a>NetworkPloicy 支持的网络插件</h4><p>要让网络策略生效，就需要特定的网络插件支持，目前已经实现了 NetworkPolicy 的网络插件包括 Calico、Weave 和 kube-router 等项目，但是并不包括 Flannel 项目。</p><p>如果需要 Flannel 支持 NetworkPloicy 需要安装额外的 <a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/flannel/flannel">插件</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes NetworkPolicy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes存储</title>
      <link href="2022/06/28/k8s-cun-chu/"/>
      <url>2022/06/28/k8s-cun-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="存储种类"><a href="#存储种类" class="headerlink" title="存储种类"></a>存储种类</h4><p><img src="http://inus-markdown.oss-cn-beijing.aliyuncs.com/img/image-20220615164455901.png" alt="存储种类"></p><h5 id="1-临时存储"><a href="#1-临时存储" class="headerlink" title="1. 临时存储"></a>1. 临时存储</h5><p>充当临时空间使用，pod中产生的数据不需要做持久化存储时可使用该存储</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kind: pod</span><br><span class="line">spec: </span><br><span class="line">  volumes:</span><br><span class="line">  - name: volumn-name #卷名称</span><br><span class="line">    emptyDir: {} #指定存储的方式为临时存储</span><br><span class="line">  containers:</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: volumn-name # 和上面的对应</span><br><span class="line">      mountPath: /usr/share/nginx/html #挂载到容器中的路径</span><br></pre></td></tr></tbody></table></figure><h5 id="2-半持久化存储"><a href="#2-半持久化存储" class="headerlink" title="2. 半持久化存储"></a>2. 半持久化存储</h5><p>hostpath，即与pod所运行的宿主机上面共享一个存数据的目录。<br>当pod漂移到其他node上面时将会读取不到原宿主机上面的内容.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kind: pod</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-path</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /opt/nginx/data #宿主机的目录</span><br><span class="line">      type: DirectoryOrCreate #给定的目录不存在则创建</span><br><span class="line">  containers:</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-path # 和上面的对应</span><br><span class="line">      mountPath: /usr/share/nginx/html #挂载到容器中的路径</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>hostPath.type</th><th>说明</th></tr></thead><tbody><tr><td>DirectoryOrCreate</td><td>给定的目录不存在则新建</td></tr><tr><td>Directory</td><td>给定的路径必须是一个存在的目录</td></tr><tr><td>FileOrCreate</td><td>给定的文件不存在则新建</td></tr><tr><td>File</td><td>给定的路径必须是一个存在的文件</td></tr><tr><td>Socket</td><td>给定的路径必须是一个存在的 UNXI socket</td></tr><tr><td>CharDevice</td><td>给定的路径必须是一个存在的字符设备</td></tr><tr><td>BlockDevice</td><td>给定的路径必须是一个存在的块设备</td></tr></tbody></table><h5 id="3-持久化存储"><a href="#3-持久化存储" class="headerlink" title="3. 持久化存储"></a>3. 持久化存储</h5><p>PersistentVolumes k8s持久化卷，旨在集群之外存储数据。</p><h4 id="PV-PersistentVolumes"><a href="#PV-PersistentVolumes" class="headerlink" title="PV PersistentVolumes"></a>PV PersistentVolumes</h4><blockquote><p>k8s持久化存储的方案，pv是全局的资源，不和namespace绑定。</p></blockquote><p>k8s持久卷主要是什么卷的访问方式，容量，回收策略和卷的具体的实现的一些参数。</p><h5 id="pv的几种访问模式"><a href="#pv的几种访问模式" class="headerlink" title="pv的几种访问模式"></a>pv的几种访问模式</h5><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>ReadWriteOnce</td><td>只能被单节点读写，可以被同一个节点的多个pod读写</td></tr><tr><td>ReadOnlyMany</td><td>可被多个节点读</td></tr><tr><td>ReadWriteMany</td><td>可被多个节点读写</td></tr><tr><td>ReadWriteOncePod</td><td>只能被单个pod读写</td></tr></tbody></table><h5 id="pv的回收策略"><a href="#pv的回收策略" class="headerlink" title="pv的回收策略"></a>pv的回收策略</h5><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>Retain</td><td>PV 数据保留，但会一直处于 Released 的状态， 不能被其他PVC使用，除非手动释放PV。</td></tr><tr><td>Delete（默认）</td><td>pvc删除后，关联的pv也将被删除</td></tr><tr><td>Recycle（废弃）</td><td>自动回收。执行（rm -rf /thevolume/*）</td></tr></tbody></table><h5 id="pv的几种状态"><a href="#pv的几种状态" class="headerlink" title="pv的几种状态"></a>pv的几种状态</h5><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>Available</td><td>自由的资源，没有被绑定到pvc</td></tr><tr><td>Bound</td><td>pv被绑定到pvc</td></tr><tr><td>Released</td><td>pvc已经被释放了，但是pv还没有被释放</td></tr><tr><td>Failed</td><td>自动回收失败</td></tr></tbody></table><h5 id="pv和pvc绑定的规则"><a href="#pv和pvc绑定的规则" class="headerlink" title="pv和pvc绑定的规则"></a>pv和pvc绑定的规则</h5><p>通过PVC定义的 ==accessModes== 读写权限，和 ==storage== 的定义，PVC会自动找到符合这些配置的PV进行绑定。</p><p>**==一个PV被PVC绑定后，不能被别的PVC绑定==**。</p><h4 id="静态创建pv"><a href="#静态创建pv" class="headerlink" title="静态创建pv"></a>静态创建pv</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: create-pv-test</span><br><span class="line">spec:</span><br><span class="line">  accessModes: ["ReadWriteMany","ReadWriteOnce"]</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  capacity: </span><br><span class="line">    storage: 1Gi</span><br><span class="line">  hostPath: </span><br><span class="line">    path: /opt/logs/create-pv-test</span><br></pre></td></tr></tbody></table></figure><h4 id="动态创建pv（StorageClass）"><a href="#动态创建pv（StorageClass）" class="headerlink" title="动态创建pv（StorageClass）"></a>动态创建pv（StorageClass）</h4><p>Kubernetes提供了一套可以自动创建PV的机制，即Dynamic Volume Provisioning（动态PV）。而手动创建并管理的PV叫做Static Volume Provisioning（静态PV）。</p><blockquote><p>StorageClass描述了一类存储的参数，k8s根据这类参数动态创建PersistentVolumes。就类似于java的类，k8s根据类创建具体的pv实例。</p></blockquote><p>StorageClass对象会定义下面两部分内容:</p><ol><li>PV的属性。比如，存储类型，Volume的大小等。</li><li>创建这种PV需要用到的存储插件，即存储制备器。</li></ol><p>有了这两个信息之后，Kubernetes就能够根据用户提交的PVC，找到一个对应的StorageClass，之后Kubernetes就会调用该StorageClass声明的存储插件，进而创建出需要的PV。</p><h5 id="创建-StorageClass"><a href="#创建-StorageClass" class="headerlink" title="创建 StorageClass"></a>创建 StorageClass</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># sc是全局的资源，不需要namespace</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata: </span><br><span class="line">  name: inus-sc-test</span><br><span class="line">allowVolumeExpansion: true #允许扩展卷，只能增加</span><br><span class="line">provisioner: driver.longhorn.io</span><br><span class="line">parameters:</span><br><span class="line">  numberOfReplicas: "3"</span><br><span class="line">  staleReplicaTimeout: "2880"</span><br><span class="line">  fromBackup: ""</span><br><span class="line">  fsType: "ext4"</span><br><span class="line">volumeBindingMode: Immediate</span><br><span class="line">reclaimPolicy: Retain</span><br></pre></td></tr></tbody></table></figure><h5 id="创建-pvc"><a href="#创建-pvc" class="headerlink" title="创建 pvc"></a>创建 pvc</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: inus-volv-test</span><br><span class="line">  namespace: 5g</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  storageClassName: inus-sc-test</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br></pre></td></tr></tbody></table></figure><h5 id="使用-StorageClass-创建-pod"><a href="#使用-StorageClass-创建-pod" class="headerlink" title="使用 StorageClass 创建 pod"></a>使用 StorageClass 创建 pod</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volv-test</span><br><span class="line">  namespace: 5g</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql-app</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">  containers:</span><br><span class="line">  - name: volv-test</span><br><span class="line">    image: mysql:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: volv</span><br><span class="line">      mountPath: /var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 3306</span><br><span class="line">    env:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: root</span><br><span class="line">  volumes:</span><br><span class="line">  - name: volv</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: inus-volv-test</span><br></pre></td></tr></tbody></table></figure><h5 id="创建-deployment"><a href="#创建-deployment" class="headerlink" title="创建 deployment"></a>创建 deployment</h5><blockquote><p>deplyment部署的pod在pod删除后会主动拉起服务</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  namespace: 5g</span><br><span class="line">  name: mysql-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector: </span><br><span class="line">    matchLabels: </span><br><span class="line">      app: mysql-app  # 选择的都是namespace中的labels</span><br><span class="line">  replicas: 1</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  strategy: </span><br><span class="line">    type: Recreate</span><br><span class="line">  template: # 描述pod, 创建pod的模板</span><br><span class="line">    metadata:</span><br><span class="line">      name: mysql-app</span><br><span class="line">      namespace: 5g</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql-app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql-app</span><br><span class="line">        image: mysql:latest</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: volv</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3306</span><br><span class="line">        env:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: root</span><br><span class="line">      volumes:</span><br><span class="line">      - name: volv</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: inus-volv-test</span><br></pre></td></tr></tbody></table></figure><h5 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-service</span><br><span class="line">  namespace: 5g</span><br><span class="line">spec:</span><br><span class="line">  selector: </span><br><span class="line">    app: mysql-app</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql-service-port</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 3306</span><br><span class="line">    targetPort: 3306</span><br><span class="line">    nodePort: 33063</span><br></pre></td></tr></tbody></table></figure><h3 id="nfs-的几种使用方式"><a href="#nfs-的几种使用方式" class="headerlink" title="nfs 的几种使用方式"></a>nfs 的几种使用方式</h3><h4 id="1-挂载到宿主机节点作为本地路径使用"><a href="#1-挂载到宿主机节点作为本地路径使用" class="headerlink" title="1. 挂载到宿主机节点作为本地路径使用"></a>1. 挂载到宿主机节点作为本地路径使用</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">- name: mysql-volv</span><br><span class="line">  hostPath: </span><br><span class="line">    path: /opt/nfsdata/mysql  # nfs服务器上的路径</span><br></pre></td></tr></tbody></table></figure><h4 id="2-pod-直接使用"><a href="#2-pod-直接使用" class="headerlink" title="2. pod 直接使用"></a>2. pod 直接使用</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql</span><br><span class="line">    image: mysql</span><br><span class="line">    env:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: root </span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-volv</span><br><span class="line">      mountPath: /var/lib/mysql</span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-volv</span><br><span class="line">    nfs: </span><br><span class="line">      server: 192.168.1.142 # nfs服务器地址</span><br><span class="line">      path: /opt/nfsdata/mysql  # nfs服务器上的路径</span><br></pre></td></tr></tbody></table></figure><h4 id="3-创建-StorageClass-使用"><a href="#3-创建-StorageClass-使用" class="headerlink" title="3. 创建 StorageClass 使用"></a>3. 创建 StorageClass 使用</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"># 创建 nfs provisioner</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  labels:</span><br><span class="line">    app: nfs-client-provisioner</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    type: Recreate</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nfs-client-provisioner</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: ns-root</span><br><span class="line">      containers:</span><br><span class="line">      - name: nfs-client-provisioner</span><br><span class="line">        image: registry.cn-beijing.aliyuncs.com/mydlq/nfs-subdir-external-provisioner:v4.0.0</span><br><span class="line">        volumeMounts:   # 挂载数据卷到容器指定目录</span><br><span class="line">        - name: nfs-volv</span><br><span class="line">          mountPath: /persistentvolumes # 不需要修改</span><br><span class="line">        env:</span><br><span class="line">        - name: PROVISIONER_NAME</span><br><span class="line">          value: nfs-provisioner    # 此处供应者名字供storageclass调用</span><br><span class="line">        - name: NFS_SERVER</span><br><span class="line">          value: 192.168.1.142  # 填入NFS的地址</span><br><span class="line">        - name: NFS_PATH</span><br><span class="line">          value: /opt/nfsdata/share # 填入NFS挂载的目录</span><br><span class="line">      volumes:</span><br><span class="line">      - name: nfs-volv</span><br><span class="line">        nfs:</span><br><span class="line">          server: 192.168.1.142 # 填入NFS的地址</span><br><span class="line">          path: /opt/nfsdata/share  # 填入NFS挂载的目录</span><br><span class="line"></span><br><span class="line"># 创建 StorageClass</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata: </span><br><span class="line">  name: mysql-sc</span><br><span class="line">allowVolumeExpansion: true #允许扩展卷，只能增加</span><br><span class="line">provisioner:nfs-provisioner</span><br><span class="line">parameters:</span><br><span class="line">  numberOfReplicas: "3"</span><br><span class="line">  staleReplicaTimeout: "2880"</span><br><span class="line">  fromBackup: ""</span><br><span class="line">  fsType: "ext4"</span><br><span class="line">volumeBindingMode: Immediate</span><br><span class="line">reclaimPolicy: Retain</span><br><span class="line"></span><br><span class="line"># 申明 pvc</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-volv-pvc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  storageClassName: mysql-sc</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">      </span><br><span class="line"># 使用</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql</span><br><span class="line">    image: mysql</span><br><span class="line">    env:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: root </span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-volv</span><br><span class="line">      mountPath: /var/lib/mysql</span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-volv</span><br><span class="line">    persistentVolumeClaim: </span><br><span class="line">      claimName: mysql-volv-pvc</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes服务部署</title>
      <link href="2022/06/28/k8s-fu-wu-bu-shu/"/>
      <url>2022/06/28/k8s-fu-wu-bu-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="连接-harbor-仓库"><a href="#连接-harbor-仓库" class="headerlink" title="连接 harbor 仓库"></a>连接 harbor 仓库</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># harbor账号密码全部正确，死活上不去，重新执行 harbor install </span><br><span class="line"># -n 命名空间</span><br><span class="line">kubectl create secret docker-registry harbor --docker-server=192.168.1.142 --docker-username=admin --docker-password=Harbor12345 [-n 5g]</span><br><span class="line"></span><br><span class="line"># 查询密码</span><br><span class="line">kubectl get secret</span><br></pre></td></tr></tbody></table></figure><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 保存docker镜像到tar文件</span><br><span class="line">docker save &lt;Image Name&gt;:&lt;TAG&gt; -o &lt;Image Name&gt;_&lt;TAG&gt;.tag</span><br><span class="line"># 加载镜像到docker</span><br><span class="line"># docker load -f &lt;Image Name&gt;_&lt;TAG&gt;.tag</span><br><span class="line"></span><br><span class="line"># 切换为minikube内部使用的docker</span><br><span class="line">eval $(minikube docker-env)</span><br><span class="line"></span><br><span class="line"># 查看pod</span><br><span class="line">kubectl get pod -n ns-test</span><br><span class="line"># 可以查看到 pod 部署在那台服务器上面</span><br><span class="line">kubectl get pod -n ns-test -o </span><br><span class="line">kubectl get pod -n 5g pod-name -o yaml</span><br><span class="line"># 查看pod启动日志</span><br><span class="line">kubectl logs pod名称 -n ns-test</span><br><span class="line"></span><br><span class="line"># 查看服务</span><br><span class="line">kubectl get svc -n ns-test</span><br><span class="line">kubectl describe svc nginx-service -n ns-test</span><br><span class="line"># 删除service</span><br><span class="line">kubectl delete service 服务名称 -n 工作空间名称</span><br><span class="line"></span><br><span class="line"># 查看k8s所有的资源命令</span><br><span class="line">kubectl api-resources</span><br><span class="line"></span><br><span class="line"># 根据yaml文件强制替换原有的资源</span><br><span class="line">kubectl replace --force -f yaml文件</span><br></pre></td></tr></tbody></table></figure><h4 id="node相关"><a href="#node相关" class="headerlink" title="node相关"></a>node相关</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kukectl get node </span><br><span class="line">kukectl describe node node名称</span><br></pre></td></tr></tbody></table></figure><h4 id="apiVersion-kind相关"><a href="#apiVersion-kind相关" class="headerlink" title="apiVersion kind相关"></a>apiVersion kind相关</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看k8s所有的api版本</span><br><span class="line">kubectl api-versions</span><br><span class="line"># 查看所有的资源</span><br><span class="line"># --namespaced=true 该资源是否有指定的namespace</span><br><span class="line">kubectl api-resources [-o wide] [--namespaced=true]</span><br><span class="line"># 查看kind对应的api版本</span><br><span class="line">kubectl explain pod.apiVersion</span><br><span class="line"># 查看资源清单格式</span><br><span class="line">kubectl explain pod</span><br></pre></td></tr></tbody></table></figure><h4 id="服务编排流程"><a href="#服务编排流程" class="headerlink" title="服务编排流程"></a>服务编排流程</h4><h5 id="1-创建工作空间"><a href="#1-创建工作空间" class="headerlink" title="1. 创建工作空间"></a>1. 创建工作空间</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># namespace yaml文件内容</span><br><span class="line">apiVersion: v1  </span><br><span class="line">kind: Namespace  #类型为Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: ns-test  #namespace 名称</span><br><span class="line">  labels:</span><br><span class="line">    name: label-test    #namespace标签</span><br><span class="line">    </span><br><span class="line"># 创建</span><br><span class="line">kubectl create -f namespace.yml</span><br><span class="line">kubectl get namespace</span><br><span class="line">kubectl describe namespace 命名空间名称</span><br><span class="line">kubectl delete namespace 命名空间名称</span><br></pre></td></tr></tbody></table></figure><h5 id="2-使用deploy部署服务"><a href="#2-使用deploy部署服务" class="headerlink" title="2. 使用deploy部署服务"></a>2. 使用deploy部署服务</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># pod yaml 文件内容</span><br><span class="line">apiVersion: apps/v1 # apps不能省略</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  namespace: ns-test</span><br><span class="line">  name: nginx-pod</span><br><span class="line">  </span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  # 集群数量</span><br><span class="line">  replicas: 1</span><br><span class="line">  #设置滚动升级策略</span><br><span class="line">  #Kubernetes在等待设置的时间后才开始进行升级，例如5s</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      #在升级过程中最多可以比原先设置多出的Pod数量</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      #在升级过程中Deployment控制器最多可以删除多少个旧Pod，主要用于提供缓冲时间</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      nodeSelector: # 设置节点选择器</span><br><span class="line">        node-label: node-label-value # 节点的标签和值全部匹配</span><br><span class="line">      # imagePullSecrets 的账号需要和当前的namespace一致</span><br><span class="line">      # 拉取镜像的密码，通过该kubectl create secret配置</span><br><span class="line">      # 如果是http的镜像地址，kubectl create secret设置的无效，直接使用docker login登录，该处配置注释掉</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      serviceAccountName: admin-user</span><br><span class="line">      containers: </span><br><span class="line">      - name: nginx</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com/inus/k8s:nginx-latest</span><br><span class="line">        resources:</span><br><span class="line">          requests: # 初始化申请的资源</span><br><span class="line">            memory: "1Gi"</span><br><span class="line">            cpu: "200m"</span><br><span class="line">          limits: # 限制的最大资源</span><br><span class="line">            memory: "2Gi"</span><br><span class="line">            cpu: "400m"</span><br><span class="line">        ports: </span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line"># 创建</span><br><span class="line">kubectl create -f nginx-pod.yml</span><br><span class="line">kubectl get pod -n ns-test</span><br><span class="line">kubectl describe pod pod名称 -n 命名空间名称</span><br><span class="line">kubectl delete pod pod名称 -n 命名空间名称</span><br></pre></td></tr></tbody></table></figure><h5 id="3-创建service"><a href="#3-创建service" class="headerlink" title="3.创建service"></a>3.创建service</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># service yaml 文件内容</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  namespace: ns-test</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    #Service在集群中暴露的端口（用于Kubernetes服务间的访问）</span><br><span class="line">    port: 80</span><br><span class="line">    #Pod上的端口（与制作容器时暴露的端口一致，在微服务工程代码中指定的端口）</span><br><span class="line">    targetPort: 80</span><br><span class="line">    #K8s集群外部访问的端口（外部机器访问）</span><br><span class="line">    nodePort: 30002</span><br><span class="line">    </span><br><span class="line"># 创建</span><br><span class="line">kubectl create -f nginx-service.yml</span><br><span class="line">kubectl get service -n ns-test</span><br><span class="line">kubectl describe service service名称 -n ns-test</span><br><span class="line">kubectl delete service service名称 -n ns-test</span><br></pre></td></tr></tbody></table></figure><h4 id="部署问题"><a href="#部署问题" class="headerlink" title="部署问题"></a>部署问题</h4><h5 id="0-1-nodes-are-available-1-node-s-had-taint-node-role-kubernetes-io-master-that-the-pod-didn’t-tolerate"><a href="#0-1-nodes-are-available-1-node-s-had-taint-node-role-kubernetes-io-master-that-the-pod-didn’t-tolerate" class="headerlink" title="0/1 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn’t tolerate."></a>0/1 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn’t tolerate.</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 删除污点</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br><span class="line"></span><br><span class="line"># 如果不允许调度</span><br><span class="line"># 污点可选参数</span><br><span class="line">    NoSchedule: 一定不能被调度</span><br><span class="line">    PreferNoSchedule: 尽量不要调度</span><br><span class="line">    NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod</span><br><span class="line">kubectl taint nodes master1 node-role.kubernetes.io/master=:NoSchedule</span><br></pre></td></tr></tbody></table></figure><h4 id="无法删除namespace，命名空间一直Terminating"><a href="#无法删除namespace，命名空间一直Terminating" class="headerlink" title="无法删除namespace，命名空间一直Terminating"></a>无法删除namespace，命名空间一直Terminating</h4><blockquote><p>直接调用接口删除namespace</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启动本地代理</span><br><span class="line">kubectl proxy --address=0.0.0.0 --port=8001 --accept-hosts='^*$'</span><br><span class="line"></span><br><span class="line"># 导出namespace的配置文件</span><br><span class="line">kubecctl get ns 命名空间名称 -o json &gt; tmp.json</span><br><span class="line"></span><br><span class="line"># 修改finalizers为[]</span><br><span class="line">cat tmp.json | grep finalizers</span><br><span class="line"></span><br><span class="line"># 调用接口删除namespace</span><br><span class="line">curl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://192.168.1.142:8001/api/v1/namespaces/命名空间名称/finalize</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes安装手册</title>
      <link href="2022/06/28/k8s-an-zhuang-shou-ce/"/>
      <url>2022/06/28/k8s-an-zhuang-shou-ce/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kubernetes.feisky.xyz/setup/cluster/kubeadm">Kubernetes 指南</a></p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><blockquote><p>你需要在每台机器上安装以下的软件包：</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm：用来初始化集群的指令。</span><br><span class="line">kubelet：在集群中的每个节点上用来启动 Pod 和容器等。</span><br><span class="line">kubectl：用来与集群通信的命令行工具。</span><br></pre></td></tr></tbody></table></figure><blockquote><p>允许 iptables 检查桥接流量</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></tbody></table></figure><blockquote><p>关闭 selinux</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 临时关闭setenforce</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 永久关闭 vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></tbody></table></figure><blockquote><p>设置主机名</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">192.168.67.128 k8sm01</span><br><span class="line">192.168.67.129 k8sm02</span><br></pre></td></tr></tbody></table></figure><h4 id="安装-k8s"><a href="#安装-k8s" class="headerlink" title="安装 k8s"></a>安装 k8s</h4><p>==注意==：别安装最新版本的 <code>kubelet</code> <code>kubeadm</code> <code>kubectl</code></p><blockquote><p><code>kubeadm config images pull --image-repository=registry.aliyuncs.com/google_containers</code> 这个命令可能拉取不到最新的k8s组件</p></blockquote><p>（==推荐==）如果计划将单个控制平面 kubeadm 集群升级成高可用， 你应该指定 <code>--control-plane-endpoint</code> 为所有控制平面节点设置共享端点。 端点可以是负载均衡器的 DNS 名称或 IP 地址。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># 添加k8s yum源</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line"># 这个指定是在上面的镜像中排除下面的三个软件包</span><br><span class="line"># exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 查看版本，安装倒数第二个版本</span><br><span class="line">yum list kubeadm --showduplicates</span><br><span class="line"></span><br><span class="line"># 别安装最新版本的，阿里云镜像可能没有该软件包</span><br><span class="line"># 安装 kubelet kubeadm kubectl</span><br><span class="line">yum install -y kubelet-1.23.6-0 kubeadm-1.23.6-0 kubectl-1.23.6-0 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"># 启动 kubelet，并且设置为开机启动</span><br><span class="line"># 该处启动会失败，执行 kubeadm init 后该服务器会启动成功</span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line"># 检查 kubelet 是否启动成功</span><br><span class="line"># kubeadm init 执行后 该服务还是启动失败，则需检查失败原因</span><br><span class="line">systemctl status kubelet</span><br><span class="line"></span><br><span class="line"># 设置拉取kubeadm所需docker镜像源</span><br><span class="line">kubeadm config images pull --image-repository=registry.aliyuncs.com/google_containers </span><br><span class="line"></span><br><span class="line"># kebeadm 初始化</span><br><span class="line"># 首先需要先登录alibab的镜像仓库</span><br><span class="line"># docker login registry.aliyuncs.com</span><br><span class="line"># --control-plane-endpoint 配置control-plane-endpoint，如果是多个则配置代理地址，例如k8s高可用集群的VIP地址。</span><br><span class="line"># 192.168.1.188:6443 是 HA VIP 地址，该地址需要提前准备好</span><br><span class="line"># 1.23.6的版本向上发布svc时端口netstat查不到</span><br><span class="line">kubeadm init \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --control-plane-endpoint=192.168.1.200:6443 \</span><br><span class="line">  --image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.23.6 \</span><br><span class="line">  --upload-certs</span><br><span class="line">    </span><br><span class="line"># 上面的指令安装成功后，执行下面的去污点指令</span><br><span class="line"># 允许master部署pod</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master:NoSchedule-</span><br><span class="line"></span><br><span class="line"># 根据这个提示安装</span><br><span class="line"># 每次重新安装后必须执行下面的命令，老的权限文件不能在新的服务中执行</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line"># 安装网络</span><br><span class="line"># 启动时需要设置 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"># 因为 kube-flannel.yml 文件中添加了 10.244.0.0/16 网段</span><br><span class="line"># [flannel](https://github.com/flannel-io/flannel#deploying-flannel-manually)</span><br><span class="line"># ip link delete cni0   # 删除网卡</span><br><span class="line"># ip link delete flannel.1  # 删除网卡</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></tbody></table></figure><h5 id="kubeadm-init-可选参数"><a href="#kubeadm-init-可选参数" class="headerlink" title="kubeadm init 可选参数"></a>kubeadm init 可选参数</h5><table><thead><tr><th>可选参数</th><th>说明</th></tr></thead><tbody><tr><td>–apiserver-advertise-address</td><td>指定API Server地址</td></tr><tr><td>–apiserver-bind-port</td><td>指定绑定的API Server端口，默认值为6443</td></tr><tr><td>–apiserver-cert-extra-sans</td><td>指定API Server的服务器证书</td></tr><tr><td>–cert-dir</td><td>指定证书的路径</td></tr><tr><td>–node-name</td><td>指定节点名称</td></tr><tr><td>–pod-network-cidr</td><td>指定pod网络IP地址段</td></tr><tr><td>–service-cidr</td><td>指定service的IP地址段</td></tr><tr><td>–service-dns-domain</td><td>指定Service的域名，默认为“cluster.local”</td></tr><tr><td>–token</td><td>指定token</td></tr><tr><td>–token-ttl</td><td>指定token有效时间，如果设置为“0”，则永不过期</td></tr><tr><td>–image-repository</td><td>指定镜像仓库地址，默认为”k8s.gcr.io”</td></tr><tr><td>–kubernetes-version</td><td>指定k8s版本</td></tr><tr><td>–dry-run</td><td>输出将要执行的操作，不做任何改变，预运行命令，不会真正的初始化服务</td></tr></tbody></table><h5 id="k8s服务重启"><a href="#k8s服务重启" class="headerlink" title="k8s服务重启"></a>k8s服务重启</h5><blockquote><p>k8s服务依赖kubelet，该服务重启成功后，整个服务将会启动成功</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemcl restart kubelet</span><br></pre></td></tr></tbody></table></figure><h4 id="安装命令自动补全"><a href="#安装命令自动补全" class="headerlink" title="安装命令自动补全"></a>安装命令自动补全</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 安装 bash-completion</span><br><span class="line">yum install bash-completion</span><br><span class="line"></span><br><span class="line"># 在 bash 中设置当前 shell 的自动补全</span><br><span class="line">source &lt;(kubectl completion bash) </span><br><span class="line">source &lt;(kubeadm completion bash) </span><br><span class="line"></span><br><span class="line"># 在你的 bash shell 中永久地添加自动补全</span><br><span class="line">echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc</span><br><span class="line">echo "source &lt;(kubeadm completion bash)" &gt;&gt; ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h4 id="安装-dashboard"><a href="#安装-dashboard" class="headerlink" title="安装 dashboard"></a>安装 dashboard</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/kubernetes/dashboard#kubernetes-dashboard</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line"># 访问</span><br><span class="line"># dashboard 只能是内网或者是https访问</span><br><span class="line">kubectl proxy --address=0.0.0.0 --port=8001 --accept-hosts='^*$'</span><br><span class="line">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</span><br></pre></td></tr></tbody></table></figure><h4 id="添加worker节点"><a href="#添加worker节点" class="headerlink" title="添加worker节点"></a>添加worker节点</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 加入k8s集群，如果不知道token，执行下面的命令生成新的</span><br><span class="line">kubeadm join 192.168.1.142:6443 --token ousz63.f5iny5ldc452ifey \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:7c51d82bcd16348d7a4b28a3bb4865694c3adafcba18d32326c8e427df215258</span><br><span class="line">        </span><br><span class="line"># token过期了, 生成一个24h后过期的token</span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"># 生成一个永久的</span><br><span class="line">kubeadm token create --ttl=0 --print-join-command </span><br><span class="line"></span><br><span class="line"># 查询所有的token</span><br><span class="line">kubeadm token list</span><br><span class="line"></span><br><span class="line"># 如果你没有 --discovery-token-ca-cert-hash 的值，执行下面的命令查询token-ca-cert-hash值。所有的token对应的证书值都是一样的。</span><br><span class="line">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'</span><br><span class="line"></span><br><span class="line"># 在其他节点上面操作k8s集群</span><br><span class="line"># 将控制面板的 admin.conf 配置文件复制到本服务器</span><br><span class="line">cd $HOME</span><br><span class="line">scp root@&lt;control-plane-host&gt;:/etc/kubernetes/admin.conf .</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i $HOME/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></tbody></table></figure><h4 id="添加control-plane节点"><a href="#添加control-plane节点" class="headerlink" title="添加control plane节点"></a>添加control plane节点</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 获取token及token证书</span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line">&gt; kubeadm join 192.168.1.142:6443 --token ocusf1.kd5vvk6t1sj3hvf7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:e35c83e987090c9157816ad1741151b97ec78a3e89d2b39f24425993bb4e2634</span><br><span class="line"></span><br><span class="line"># 获取control-plane证书</span><br><span class="line">kubeadm init phase upload-certs --upload-certs</span><br><span class="line">&gt; 2b820018d17d8cbd7680f5c6fc42e05995cce859e48b98a10326cd758750abf3</span><br><span class="line"></span><br><span class="line"># 加入集群 第一个命令和第二个命令组合使用</span><br><span class="line">kubeadm join 192.168.1.142:6443 --token ocusf1.kd5vvk6t1sj3hvf7 \ </span><br><span class="line">    --discovery-token-ca-cert-hash sha256:e35c83e987090c9157816ad1741151b97ec78a3e89d2b39f24425993bb4e2634 \ </span><br><span class="line">    --control-plane --certificate-key 2b820018d17d8cbd7680f5c6fc42e05995cce859e48b98a10326cd758750abf3</span><br><span class="line"></span><br><span class="line"># 注意：第一次添加节点一般会出现下面的错误</span><br><span class="line">The cluster has a stable controlPlaneEndpoint address.</span><br><span class="line">集群没有稳定的controlPlaneEndpoint错误，解决方案在下面的安装问题记录中。</span><br></pre></td></tr></tbody></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># control plane节点上执行下面的命令 #</span><br><span class="line"># 使用适当的凭证与控制平面节点通信，运行：</span><br><span class="line">kubectl drain &lt;node name&gt; --delete-emptydir-data --force --ignore-daemonsets</span><br><span class="line"># 删除节点：</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"># 在被删除的节点上执行下面的命令 #</span><br><span class="line"># 节点服务器上面重置 kubeadm 安装状态：</span><br><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line"># 下面的命令重置所有的iptables设置</span><br><span class="line"># 重置过程不会重置或清除 iptables 规则或 IPVS 表。如果你希望重置 iptables，则必须手动进行：</span><br><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br><span class="line"></span><br><span class="line"># 如果要重置 IPVS 表，则必须运行以下命令：</span><br><span class="line">ipvsadm -C</span><br></pre></td></tr></tbody></table></figure><h4 id="节点污点-taint-和pod容忍度-toleration"><a href="#节点污点-taint-和pod容忍度-toleration" class="headerlink" title="节点污点[taint]和pod容忍度[toleration]"></a>节点污点[taint]和pod容忍度[toleration]</h4><blockquote><p>节点污点有点类似节点上的标签或注解信息，它们都是用来描述对应节点的元数据信息；<br>污点使用kv数据来表示，effect来描述污点的效用</p></blockquote><blockquote><p>pod容忍度表示pod要想运行在对应有污点的节点上，对应pod就要容忍对应节点上的污点；</p></blockquote><h5 id="污点的三个效用-effect"><a href="#污点的三个效用-effect" class="headerlink" title="污点的三个效用[effect]"></a>污点的三个效用[effect]</h5><ol><li>NoSchedule 表示拒绝pod调度到对应节点上运行</li><li>PreferSchedule 表示尽量不把pod调度到此节点上运行</li><li>NoExecute 表示拒绝将pod调度到此节点上运行，比NoSchedule更加严格</li></ol><h5 id="pod污点容忍度通过下面的配置来设置"><a href="#pod污点容忍度通过下面的配置来设置" class="headerlink" title="pod污点容忍度通过下面的配置来设置"></a>pod污点容忍度通过下面的配置来设置</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: pod</span><br><span class="line">spec: </span><br><span class="line">  tolerations:</span><br><span class="line">  - key: node-role.kubernetes.io/master</span><br><span class="line">    # Equal 或者 Exists</span><br><span class="line">    # Equal key和value都要相等</span><br><span class="line">    # Exists key相等就行,value不做考虑</span><br><span class="line">    operator: Equal</span><br><span class="line">    value: # 没有值可以不填</span><br><span class="line">    effect: NoSchedule</span><br><span class="line">  containers:</span><br><span class="line">  - ...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看污点</span><br><span class="line">kubectl describe node etcd2 | grep Taint</span><br><span class="line">&gt; Taints:   node-role.kubernetes.io/master:NoSchedule #</span><br><span class="line"></span><br><span class="line"># 删除污点</span><br><span class="line"># 在上面的node-role.kubernetes.io/master:NoSchedule最后加上-</span><br><span class="line">kubectl taint node etcd2 node-role.kubernetes.io/master:NoSchedule-</span><br><span class="line"></span><br><span class="line"># 添加污点</span><br><span class="line"># --overwrite 覆盖原有的污点</span><br><span class="line">kubectl taint node etcd2 node-role.kubernetes.io/master:NoSchedule [--overwrite]</span><br></pre></td></tr></tbody></table></figure><h4 id="flannel-网络"><a href="#flannel-网络" class="headerlink" title="flannel 网络"></a>flannel 网络</h4><p>Kubernetes 集群中的每个主机都有自己一个完整的子网，不同节点上的Pod无法进行通信。</p><p><img src="http://inus-markdown.oss-cn-beijing.aliyuncs.com/img/flannel.jpg" alt="flannel"></p><p>Pod 通过安装在每个节点上的 flannel-deamonset 进行跨节点通信。</p><h3 id="安装问题记录"><a href="#安装问题记录" class="headerlink" title="安装问题记录"></a>安装问题记录</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询指定服务启动问题</span><br><span class="line">journalctl -xefu kubelet</span><br><span class="line">tail -f /var/log/message</span><br></pre></td></tr></tbody></table></figure><h5 id="failed-to-load-Kubelet-config-file-var-lib-kubelet-config-yaml"><a href="#failed-to-load-Kubelet-config-file-var-lib-kubelet-config-yaml" class="headerlink" title="failed to load Kubelet config file /var/lib/kubelet/config.yaml"></a>failed to load Kubelet config file /var/lib/kubelet/config.yaml</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubeadm init 没有执行</span><br><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --image-repository=registry.aliyuncs.com/google_containers</span><br></pre></td></tr></tbody></table></figure><h5 id="hostname-“mq”-could-not-be-reached"><a href="#hostname-“mq”-could-not-be-reached" class="headerlink" title="hostname “mq” could not be reached"></a>hostname “mq” could not be reached</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将 mq 加入到 /etc/hosts</span><br><span class="line">vi /etc/hosts</span><br><span class="line">127.0.0.1 mq</span><br></pre></td></tr></tbody></table></figure><h5 id="container-runtime-is-not-running-output-time-”2022-05-05T11-17-59-08-00”-level-fatal-msg-”getting-status-of-runtime-rpc-error-code-Unimplemented-desc-unknown-service-runtime-v1alpha2-RuntimeService”"><a href="#container-runtime-is-not-running-output-time-”2022-05-05T11-17-59-08-00”-level-fatal-msg-”getting-status-of-runtime-rpc-error-code-Unimplemented-desc-unknown-service-runtime-v1alpha2-RuntimeService”" class="headerlink" title="container runtime is not running: output: time=”2022-05-05T11:17:59+08:00” level=fatal msg=”getting status of runtime: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService”"></a>container runtime is not running: output: time=”2022-05-05T11:17:59+08:00” level=fatal msg=”getting status of runtime: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService”</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 出现这个可能是版本问题，降低个版本</span><br><span class="line"># 下面的命令可以不执行</span><br><span class="line">rm /etc/containerd/config.toml</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></tbody></table></figure><h5 id="kubelet-cgroup-driver-quot-systemd-quot-is-different-from-docker-cgroup-driver-quot-cgroupfs-quot"><a href="#kubelet-cgroup-driver-quot-systemd-quot-is-different-from-docker-cgroup-driver-quot-cgroupfs-quot" class="headerlink" title="kubelet cgroup driver: &quot;systemd&quot; is different from docker cgroup driver: &quot;cgroupfs&quot;"></a>kubelet cgroup driver: "systemd" is different from docker cgroup driver: "cgroupfs"</h5><p><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/">配置驱动</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 查看 docker 驱动</span><br><span class="line">docker info | grep group</span><br><span class="line"></span><br><span class="line"># 将 docker cgroupfs 驱动修改为 systemd</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">{</span><br><span class="line">  "exec-opts": ["native.cgroupdriver=systemd"],</span><br><span class="line">  "log-driver": "json-file",</span><br><span class="line">  "log-opts": {</span><br><span class="line">    "max-size": "100m"</span><br><span class="line">  },</span><br><span class="line">  "storage-driver": "overlay2"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><h5 id="coredns-停滞在-Pending-状态"><a href="#coredns-停滞在-Pending-状态" class="headerlink" title="coredns 停滞在 Pending 状态"></a><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/troubleshooting-kubeadm/#coredns-%E5%81%9C%E6%BB%9E%E5%9C%A8-pending-%E7%8A%B6%E6%80%81">coredns 停滞在 Pending 状态</a></h5><p><img src="http://inus-markdown.oss-cn-beijing.aliyuncs.com/img/image-20220429144328392.png" alt="image-20220429144328392"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看日志</span><br><span class="line">tail -f /var/log/messages</span><br><span class="line">"Container runtime network not ready" networkReady="NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized"</span><br><span class="line"></span><br><span class="line"># 原因是没有初始化网络</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></tbody></table></figure><h5 id="第一次加入control-plane的时候会有以下报错：集群没有稳定的controlPlaneEndpoint"><a href="#第一次加入control-plane的时候会有以下报错：集群没有稳定的controlPlaneEndpoint" class="headerlink" title="第一次加入control plane的时候会有以下报错：集群没有稳定的controlPlaneEndpoint"></a>第一次加入control plane的时候会有以下报错：集群没有稳定的controlPlaneEndpoint</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@etcd2 ~]# kubeadm join 192.168.1.142:6443 --token ocusf1.kd5vvk6t1sj3hvf7 --discovery-token-ca-cert-hash sha256:e35c83e987090c9157816ad1741151b97ec78a3e89d2b39f24425993bb4e2634 --control-plane --certificate-key 2b820018d17d8cbd7680f5c6fc42e05995cce859e48b98a10326cd758750abf3</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><br><span class="line">error execution phase preflight: </span><br><span class="line">One or more conditions for hosting a new control plane instance is not satisfied.</span><br><span class="line"></span><br><span class="line">unable to add a new control plane instance to a cluster that doesn't have a stable controlPlaneEndpoint address</span><br><span class="line"></span><br><span class="line">Please ensure that:</span><br><span class="line">* The cluster has a stable controlPlaneEndpoint address.</span><br><span class="line">* The certificates that must be shared among control plane instances are provided.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 检查命名空间kube-system下面ConfigMap中的kubeadm-config配置中是否包含controlPlaneEndpoint </span><br><span class="line">kubectl -n kube-system get configmap kubeadm-config -o yaml</span><br><span class="line">kubectl -n kube-system get cm kubeadm-config -o yaml</span><br><span class="line"></span><br><span class="line"># 修改kubeadm-config配置，添加controlPlaneEndpoint</span><br><span class="line">kubectl -n kube-system edit cm kubeadm-config</span><br><span class="line"># controlPlaneEndpoint的大概的位置</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.18.0</span><br><span class="line">controlPlaneEndpoint: 192.168.1.142:6443</span><br></pre></td></tr></tbody></table></figure><h5 id="“Error-adding-pod-to-network”-err-”failed-to-delegate-add-failed-to-set-bridge-addr-quot-cni0-quot-already-has-an-IP-address-different-from-10-244-1-1-24”-pod-”5g-user-pod-59549ff4c9-9cg67”"><a href="#“Error-adding-pod-to-network”-err-”failed-to-delegate-add-failed-to-set-bridge-addr-quot-cni0-quot-already-has-an-IP-address-different-from-10-244-1-1-24”-pod-”5g-user-pod-59549ff4c9-9cg67”" class="headerlink" title="“Error adding pod to network” err=”failed to delegate add: failed to set bridge addr: &quot;cni0&quot; already has an IP address different from 10.244.1.1/24” pod=”5g/user-pod-59549ff4c9-9cg67”"></a>“Error adding pod to network” err=”failed to delegate add: failed to set bridge addr: "cni0" already has an IP address different from 10.244.1.1/24” pod=”5g/user-pod-59549ff4c9-9cg67”</h5><blockquote><p>节点加入了k8s集群多次，重新加入后没有重启docker，导致原有的网络和现在冲突</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 检查当前节点的cni的ip地址</span><br><span class="line">ifconfig</span><br><span class="line">&gt; cni0:inet 10.244.2.1 和 10.244.1.1/24 不一致</span><br><span class="line"></span><br><span class="line"># 执行下面的命令</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"># 上述如果不行，下线docker网卡重新启动</span><br><span class="line">ifconfig docker0 down </span><br></pre></td></tr></tbody></table></figure><h5 id="connect-no-route-to-host"><a href="#connect-no-route-to-host" class="headerlink" title="connect: no route to host"></a>connect: no route to host</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot多数据源</title>
      <link href="2021/11/29/springboot-duo-shu-ju-yuan/"/>
      <url>2021/11/29/springboot-duo-shu-ju-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="springboot-mybatis"><a href="#springboot-mybatis" class="headerlink" title="springboot + mybatis"></a>springboot + mybatis</h3><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h4><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dudao:</span> <span class="comment"># duao数据源</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/dudao?useUnicode=true&amp;characterEncoding=utf8&amp;nullCatalogMeansCurrent=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">bpm:</span> <span class="comment"># bpm数据源</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/bpm?useUnicode=true&amp;characterEncoding=utf8&amp;nullCatalogMeansCurrent=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis配置      </span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">classpath:mybatis/**/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lo.multipools.domain</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h4 id="springboot配置类"><a href="#springboot配置类" class="headerlink" title="springboot配置类"></a>springboot配置类</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">// 主数据源</span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages = "com.lo.multipools.mapper.bpm", sqlSessionTemplateRef = "bpmSqlSessionTemplate")</span><br><span class="line">public class DataSourceBpm {</span><br><span class="line">@Primary</span><br><span class="line">@Bean("bpmDataSourceProperties")</span><br><span class="line">@ConfigurationProperties(prefix = "spring.datasource.bpm")</span><br><span class="line">public DataSourceProperties bpmDataSourceProperties() {</span><br><span class="line">return new DataSourceProperties();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Primary</span><br><span class="line">@Bean(name = "bpmDataSource")</span><br><span class="line">public DataSource bpmDataSource(@Qualifier("bpmDataSourceProperties") DataSourceProperties dataSourceProperties) {</span><br><span class="line">return dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Primary</span><br><span class="line">@Bean("bpmSqlSessionFactory")</span><br><span class="line">public SqlSessionFactory bpmSqlSessionFactory(@Qualifier("bpmDataSource") DataSource dataSource) throws Exception {</span><br><span class="line">SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();</span><br><span class="line">sqlSessionFactory.setDataSource(dataSource);</span><br><span class="line">sqlSessionFactory.setMapperLocations(</span><br><span class="line">        // 配置mapper.xml路劲</span><br><span class="line">new PathMatchingResourcePatternResolver().getResources("classpath*:/mybatis/bpm/**/*.xml"));</span><br><span class="line">return sqlSessionFactory.getObject();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Primary</span><br><span class="line">@Bean(name = "bpmTransactionManager")</span><br><span class="line">public DataSourceTransactionManager bpmTransactionManager(@Qualifier("bpmDataSource") DataSource dataSource) {</span><br><span class="line">return new DataSourceTransactionManager(dataSource);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Primary</span><br><span class="line">@Bean(name = "bpmSqlSessionTemplate")</span><br><span class="line">public SqlSessionTemplate bpmSqlSessionTemplate(</span><br><span class="line">@Qualifier("bpmSqlSessionFactory") SqlSessionFactory sqlSessionFactory) {</span><br><span class="line">return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// dudao数据源</span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages = "com.lo.multipools.mapper.dudao", sqlSessionTemplateRef = "dudaoSqlSessionTemplate")</span><br><span class="line">public class DataSourceDudao {</span><br><span class="line">@Bean(name = "dudaoDataSourceProperties")</span><br><span class="line">@ConfigurationProperties(prefix = "spring.datasource.dudao")</span><br><span class="line">public DataSourceProperties dudaoDataSourceProperties() {</span><br><span class="line">return new DataSourceProperties();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Bean(name = "dudaoDataSource")</span><br><span class="line">public DataSource dudaoDataSource(</span><br><span class="line">@Qualifier("dudaoDataSourceProperties") DataSourceProperties dataSourceProperties) {</span><br><span class="line">return dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Bean("dudaoSqlSessionFactory")</span><br><span class="line">public SqlSessionFactory bpmSqlSessionFactory(@Qualifier("dudaoDataSource") DataSource dataSource)</span><br><span class="line">throws Exception {</span><br><span class="line">SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();</span><br><span class="line">sqlSessionFactory.setDataSource(dataSource);</span><br><span class="line">sqlSessionFactory.setMapperLocations(</span><br><span class="line">        // 配置mapper.xml路劲</span><br><span class="line">new PathMatchingResourcePatternResolver().getResources("classpath*:/mybatis/dudao/**/*.xml"));</span><br><span class="line">return sqlSessionFactory.getObject();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Bean(name = "dudaoTransactionManager")</span><br><span class="line">public DataSourceTransactionManager bpmTransactionManager(@Qualifier("dudaoDataSource") DataSource dataSource) {</span><br><span class="line">return new DataSourceTransactionManager(dataSource);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Bean(name = "dudaoSqlSessionTemplate")</span><br><span class="line">public SqlSessionTemplate bpmSqlSessionTemplate(</span><br><span class="line">@Qualifier("dudaoSqlSessionFactory") SqlSessionFactory sqlSessionFactory) {</span><br><span class="line">return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="mybatis-plus-多数据源"><a href="#mybatis-plus-多数据源" class="headerlink" title="mybatis-plus 多数据源"></a>mybatis-plus 多数据源</h3><p>@DS</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot多数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es数据存取</title>
      <link href="2021/11/29/elasticsearch/"/>
      <url>2021/11/29/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h4 id="ES写数据过程"><a href="#ES写数据过程" class="headerlink" title="ES写数据过程"></a>ES写数据过程</h4><ol><li>客户端选择一个node发送请求过去, 这个节点称之为协调节点(coordinating node)</li><li>协调节点对document进行路由, 将节点转发到主分片的节点上面</li><li>有主分片的节点处理实际请求, 然后将数据同步副本节点</li><li>协调节点如果发现主分片和所有副本节点都写完后响应客户端</li></ol><h4 id="ES读数据过程-根据doc-id进行查询"><a href="#ES读数据过程-根据doc-id进行查询" class="headerlink" title="ES读数据过程 - 根据doc id进行查询"></a>ES读数据过程 - 根据doc id进行查询</h4><blockquote><p>可以通过 doc id 来查询，会根据 doc id 进行 hash，判断出来当时把 doc id 分配到了<br>哪个 shard 上面去，从那个 shard 去查询。</p></blockquote><ol><li>客户端将请求发送任意一个node上面, 这个节点称之为协调节点</li><li>协调节点会对文档的docid进行hash路由, 计算该文档存在所有的分片和副本之后, 然后再主分片和副本之间 <code>round-robin</code> 随机轮询算法, 选择一个节点处理该请求</li><li>接收到请求的node, 返回document给协调节点</li><li>协调节点将文档返回给客户端</li></ol><h4 id="ES检索流程"><a href="#ES检索流程" class="headerlink" title="ES检索流程"></a>ES检索流程</h4><blockquote><p>ES根据检索的关键字, 将所有文档全部检索出来后返回给客户端</p></blockquote><ol><li>客户端发送一个请求到协调节点</li><li>协调节点将该请求发送到所有的分片对应的主分片和副本上去</li><li><code>query phase</code> 阶段: 每个shared将自己检索的结果(其实就是一些doc id)返回协调节点, 由协调节点进行合并, 排序, 分页操作后, 产生最后的结果</li><li><code>fetch phase</code> 阶段: 有协调节点去各个node上拉取document数据, 返回给客户端</li></ol><h4 id="ES-分片设置理论"><a href="#ES-分片设置理论" class="headerlink" title="ES 分片设置理论"></a>ES 分片设置理论</h4><ol><li>每个分片的设置最大最好不好找过<code>30G</code></li><li>先预见n年后的ES的整个数据体量</li><li>如果: 每天数的数据增量是<code>100M</code> </li><li>每年的增量就是<code>35G</code></li><li>如果是设置<code>2个副本</code>, 则整体数据量大约是<code>100G</code></li><li><code>3年</code>之后数据量是<code>300G</code>, 则分<code>10</code>个分片比较合适</li><li>所有服务器的内存总和设置最少需要为<code>150G</code></li><li>性能最佳为<code>300G</code>的文件内存</li></ol><h4 id="ES-关于分页"><a href="#ES-关于分页" class="headerlink" title="ES 关于分页"></a>ES 关于分页</h4><blockquote><p>由于ES的分片, 数据分散在各个服务的node节点上面, 分页检索是比较慢的, 举个例子: </p></blockquote><ol><li>协调节点接收到分页请求后, 假如是查询的是<code>第100页</code>, 每页的数据是 <code>10条</code></li><li>各个分片会查询<code>前1000条</code>数据</li><li>如果有5个分片那就是<code>5000条</code>数据</li><li>接着协调节点会将所有的数据进行合并, 处理然后得到<code>第100页的10条数据</code></li><li>所以结论是 <strong>es是分页越深速度越慢</strong> </li></ol><h5 id="ES-分页的一些解决方案"><a href="#ES-分页的一些解决方案" class="headerlink" title="ES 分页的一些解决方案"></a>ES 分页的一些解决方案</h5><ol><li>不允许深度分页</li><li>使用 <code>scroll api</code> 下拉将每页数据拉出来</li></ol>]]></content>
      
      
      <categories>
          
          <category> es </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es数据存取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主要解码器</title>
      <link href="2021/06/09/netty-jie-ma-qi/"/>
      <url>2021/06/09/netty-jie-ma-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="ByteToMessageDecoder"><a href="#ByteToMessageDecoder" class="headerlink" title="ByteToMessageDecoder"></a>ByteToMessageDecoder</h3><blockquote><p>消息解码器是netty中的重要部分, 而ByteToMessageDecoder是自定义解码器的重要的类</p></blockquote><h4 id="该解码器主要是下面的职责"><a href="#该解码器主要是下面的职责" class="headerlink" title="该解码器主要是下面的职责"></a>该解码器主要是下面的职责</h4><ol><li><p>累加字节码信息</p></li><li><p>解码字节码消息成另一种格式的消息传递消费</p></li></ol><h4 id="该解码器注意点"><a href="#该解码器注意点" class="headerlink" title="该解码器注意点"></a>该解码器注意点</h4><ol><li>单解码设置, 有升级协议或者其他操作的设置成单解码</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节解码器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteToMessageDecoder</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并累加器类, 主要是将上次接受的到消息和当前的消息进行累加后再处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Cumulator MERGE_CUMULATOR = <span class="keyword">new</span> Cumulator() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ByteBuf <span class="title">cumulate</span><span class="params">(ByteBufAllocator alloc, ByteBuf cumulation, ByteBuf in)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (!cumulation.isReadable() &amp;&amp; in.isContiguous()) {</span><br><span class="line">                <span class="comment">// 累加器是空的, 并且入栈缓冲器是是连续的, 直接使用入栈缓冲器</span></span><br><span class="line">                cumulation.release();</span><br><span class="line">                <span class="keyword">return</span> in;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 当前信息的字节长度</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> required = in.readableBytes();</span><br><span class="line">                <span class="comment">// 当前累加器中的容量不够, 扩展累加器容量</span></span><br><span class="line">                <span class="keyword">if</span> (required &gt; cumulation.maxWritableBytes() ||</span><br><span class="line">                        (required &gt; cumulation.maxFastWritableBytes() &amp;&amp; cumulation.refCnt() &gt; <span class="number">1</span>) ||</span><br><span class="line">                        cumulation.isReadOnly()) {</span><br><span class="line"><span class="comment">// 扩容累加器</span></span><br><span class="line">                    <span class="keyword">return</span> expandCumulation(alloc, cumulation, in);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 将当前消息和之前的消息合并</span></span><br><span class="line">                cumulation.writeBytes(in, in.readerIndex(), required);</span><br><span class="line">                in.readerIndex(in.writerIndex());</span><br><span class="line">                <span class="keyword">return</span> cumulation;</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 释放入栈缓冲区内存</span></span><br><span class="line">                in.release();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 混合累加器, 将上次的消息和当前的消息进行混合, 不需要将消息进行拷贝合并</span></span><br><span class="line">    <span class="comment">// 该类是netty零拷贝的一个体现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Cumulator COMPOSITE_CUMULATOR = <span class="keyword">new</span> Cumulator() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ByteBuf <span class="title">cumulate</span><span class="params">(ByteBufAllocator alloc, ByteBuf cumulation, ByteBuf in)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (!cumulation.isReadable()) {</span><br><span class="line">                cumulation.release();</span><br><span class="line">                <span class="keyword">return</span> in;</span><br><span class="line">            }</span><br><span class="line">            CompositeByteBuf composite = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (cumulation <span class="keyword">instanceof</span> CompositeByteBuf &amp;&amp; cumulation.refCnt() == <span class="number">1</span>) {</span><br><span class="line">                    <span class="comment">// 当前累加器是混合累加器, 而且该缓冲器还未被释放</span></span><br><span class="line">                    composite = (CompositeByteBuf) cumulation;</span><br><span class="line">                    <span class="comment">// Writer index must equal capacity if we are going to "write"</span></span><br><span class="line">                    <span class="comment">// new components to the end</span></span><br><span class="line">                    <span class="keyword">if</span> (composite.writerIndex() != composite.capacity()) {</span><br><span class="line">                        composite.capacity(composite.writerIndex());</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 分配一个新的混合累加器</span></span><br><span class="line">                    composite = alloc.compositeBuffer(Integer.MAX_VALUE).addFlattenedComponents(<span class="keyword">true</span>, cumulation);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 将入栈缓冲器中混合到混合累加器中</span></span><br><span class="line">                composite.addFlattenedComponents(<span class="keyword">true</span>, in);</span><br><span class="line">                in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> composite;</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="keyword">null</span>) {</span><br><span class="line">                    <span class="comment">// 引用累积器-1</span></span><br><span class="line">                    in.release();</span><br><span class="line">                    <span class="comment">// 混合累加器引用计数-1</span></span><br><span class="line">                    <span class="keyword">if</span> (composite != <span class="keyword">null</span> &amp;&amp; composite != cumulation) {</span><br><span class="line">                        composite.release();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> STATE_INIT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> STATE_CALLING_CHILD_DECODE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> STATE_HANDLER_REMOVED_PENDING = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    ByteBuf cumulation;</span><br><span class="line">    <span class="keyword">private</span> Cumulator cumulator = MERGE_CUMULATOR;<span class="comment">// 默认是合并累积器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> singleDecode;<span class="comment">// 是否是单解码, 就是每次channelRead只解码一条信息, 性能会比较差</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This flag is used to determine if we need to call {<span class="doctag">@link</span> ChannelHandlerContext#read()} to consume more data</span></span><br><span class="line"><span class="comment">     * when {<span class="doctag">@link</span> ChannelConfig#isAutoRead()} is {<span class="doctag">@code</span> false}.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> firedChannelRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解码状态标识位, </span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;{<span class="doctag">@link</span> #STATE_INIT}&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;{<span class="doctag">@link</span> #STATE_CALLING_CHILD_DECODE}&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;{<span class="doctag">@link</span> #STATE_HANDLER_REMOVED_PENDING}&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> decodeState = STATE_INIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> discardAfterReads = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numReads;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ByteToMessageDecoder</span><span class="params">()</span> </span>{</span><br><span class="line">        ensureNotSharable();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置每次只解码一条消息, 如果有协议升级等需要单条信息的时候, 设置单解码将很有用</span></span><br><span class="line"><span class="comment">     * 默认是单解码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Default is {<span class="doctag">@code</span> false} as this has performance impacts.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSingleDecode</span><span class="params">(<span class="keyword">boolean</span> singleDecode)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.singleDecode = singleDecode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If {<span class="doctag">@code</span> true} then only one message is decoded on each</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> #channelRead(ChannelHandlerContext, Object)} call.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Default is {<span class="doctag">@code</span> false} as this has performance impacts.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleDecode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> singleDecode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the {<span class="doctag">@link</span> Cumulator} to use for cumulate the received {<span class="doctag">@link</span> ByteBuf}s.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCumulator</span><span class="params">(Cumulator cumulator)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.cumulator = ObjectUtil.checkNotNull(cumulator, <span class="string">"cumulator"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the number of reads after which {<span class="doctag">@link</span> ByteBuf#discardSomeReadBytes()} are called and so free up memory.</span></span><br><span class="line"><span class="comment">     * The default is {<span class="doctag">@code</span> 16}.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiscardAfterReads</span><span class="params">(<span class="keyword">int</span> discardAfterReads)</span> </span>{</span><br><span class="line">        checkPositive(discardAfterReads, <span class="string">"discardAfterReads"</span>);</span><br><span class="line">        <span class="keyword">this</span>.discardAfterReads = discardAfterReads;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the actual number of readable bytes in the internal cumulative</span></span><br><span class="line"><span class="comment">     * buffer of this decoder. You usually do not need to rely on this value</span></span><br><span class="line"><span class="comment">     * to write a decoder. Use it only when you must use it at your own risk.</span></span><br><span class="line"><span class="comment">     * This method is a shortcut to {<span class="doctag">@link</span> #internalBuffer() internalBuffer().readableBytes()}.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">actualReadableBytes</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> internalBuffer().readableBytes();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the internal cumulative buffer of this decoder. You usually</span></span><br><span class="line"><span class="comment">     * do not need to access the internal buffer directly to write a decoder.</span></span><br><span class="line"><span class="comment">     * Use it only when you must use it at your own risk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ByteBuf <span class="title">internalBuffer</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (cumulation != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> cumulation;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> Unpooled.EMPTY_BUFFER;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (decodeState == STATE_CALLING_CHILD_DECODE) {</span><br><span class="line">            decodeState = STATE_HANDLER_REMOVED_PENDING;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        ByteBuf buf = cumulation;</span><br><span class="line">        <span class="keyword">if</span> (buf != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// Directly set this to null so we are sure we not access it in any other method here anymore.</span></span><br><span class="line">            cumulation = <span class="keyword">null</span>;</span><br><span class="line">            numReads = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> readable = buf.readableBytes();</span><br><span class="line">            <span class="keyword">if</span> (readable &gt; <span class="number">0</span>) {</span><br><span class="line">                ctx.fireChannelRead(buf);</span><br><span class="line">                ctx.fireChannelReadComplete();</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                buf.release();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        handlerRemoved0(ctx);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets called after the {<span class="doctag">@link</span> ByteToMessageDecoder} was removed from the actual context and it doesn't handle</span></span><br><span class="line"><span class="comment">     * events anymore.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRemoved0</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>{ }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该类中最主要的一个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> ByteBuf) {</span><br><span class="line">            CodecOutputList out = CodecOutputList.newInstance();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                first = cumulation == <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 累加字节消息</span></span><br><span class="line">                cumulation = cumulator.cumulate(ctx.alloc(),</span><br><span class="line">                        first ? Unpooled.EMPTY_BUFFER : cumulation, (ByteBuf) msg);</span><br><span class="line">                <span class="comment">// 调用信息解码方法</span></span><br><span class="line">                callDecode(ctx, cumulation, out);</span><br><span class="line">            } <span class="keyword">catch</span> (DecoderException e) {</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> DecoderException(e);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">if</span> (cumulation != <span class="keyword">null</span> &amp;&amp; !cumulation.isReadable()) {</span><br><span class="line">                        numReads = <span class="number">0</span>;</span><br><span class="line">                        cumulation.release();</span><br><span class="line">                        cumulation = <span class="keyword">null</span>;</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (++numReads &gt;= discardAfterReads) {</span><br><span class="line">                        <span class="comment">// We did enough reads already try to discard some bytes so we not risk to see a OOME.</span></span><br><span class="line">                        <span class="comment">// See https://github.com/netty/netty/issues/4275</span></span><br><span class="line">                        numReads = <span class="number">0</span>;</span><br><span class="line">                        discardSomeReadBytes();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> size = out.size();</span><br><span class="line">                    firedChannelRead |= out.insertSinceRecycled();</span><br><span class="line">                    fireChannelRead(ctx, out, size);</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    out.recycle();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 消息不是ByteBuf, 直接走下一个handler</span></span><br><span class="line">            ctx.fireChannelRead(msg);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get {<span class="doctag">@code</span> numElements} out of the {<span class="doctag">@link</span> List} and forward these through the pipeline.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fireChannelRead</span><span class="params">(ChannelHandlerContext ctx, List&lt;Object&gt; msgs, <span class="keyword">int</span> numElements)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (msgs <span class="keyword">instanceof</span> CodecOutputList) {</span><br><span class="line">            fireChannelRead(ctx, (CodecOutputList) msgs, numElements);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numElements; i++) {</span><br><span class="line">                ctx.fireChannelRead(msgs.get(i));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get {<span class="doctag">@code</span> numElements} out of the {<span class="doctag">@link</span> CodecOutputList} and forward these through the pipeline.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fireChannelRead</span><span class="params">(ChannelHandlerContext ctx, CodecOutputList msgs, <span class="keyword">int</span> numElements)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numElements; i ++) {</span><br><span class="line">            ctx.fireChannelRead(msgs.getUnsafe(i));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        numReads = <span class="number">0</span>;</span><br><span class="line">        discardSomeReadBytes();</span><br><span class="line">        <span class="keyword">if</span> (!firedChannelRead &amp;&amp; !ctx.channel().config().isAutoRead()) {</span><br><span class="line">            ctx.read();</span><br><span class="line">        }</span><br><span class="line">        firedChannelRead = <span class="keyword">false</span>;</span><br><span class="line">        ctx.fireChannelReadComplete();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">discardSomeReadBytes</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (cumulation != <span class="keyword">null</span> &amp;&amp; !first &amp;&amp; cumulation.refCnt() == <span class="number">1</span>) {</span><br><span class="line">            <span class="comment">// discard some bytes if possible to make more room in the</span></span><br><span class="line">            <span class="comment">// buffer but only if the refCnt == 1  as otherwise the user may have</span></span><br><span class="line">            <span class="comment">// used slice().retain() or duplicate().retain().</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// See:</span></span><br><span class="line">            <span class="comment">// - https://github.com/netty/netty/issues/2327</span></span><br><span class="line">            <span class="comment">// - https://github.com/netty/netty/issues/1764</span></span><br><span class="line">            cumulation.discardSomeReadBytes();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        channelInputClosed(ctx, <span class="keyword">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> ChannelInputShutdownEvent) {</span><br><span class="line">            <span class="comment">// The decodeLast method is invoked when a channelInactive event is encountered.</span></span><br><span class="line">            <span class="comment">// This method is responsible for ending requests in some situations and must be called</span></span><br><span class="line">            <span class="comment">// when the input has been shutdown.</span></span><br><span class="line">            channelInputClosed(ctx, <span class="keyword">false</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">channelInputClosed</span><span class="params">(ChannelHandlerContext ctx, <span class="keyword">boolean</span> callChannelInactive)</span> </span>{</span><br><span class="line">        CodecOutputList out = CodecOutputList.newInstance();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            channelInputClosed(ctx, out);</span><br><span class="line">        } <span class="keyword">catch</span> (DecoderException e) {</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DecoderException(e);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (cumulation != <span class="keyword">null</span>) {</span><br><span class="line">                    cumulation.release();</span><br><span class="line">                    cumulation = <span class="keyword">null</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">int</span> size = out.size();</span><br><span class="line">                fireChannelRead(ctx, out, size);</span><br><span class="line">                <span class="keyword">if</span> (size &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// Something was read, call fireChannelReadComplete()</span></span><br><span class="line">                    ctx.fireChannelReadComplete();</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (callChannelInactive) {</span><br><span class="line">                    ctx.fireChannelInactive();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// Recycle in all cases</span></span><br><span class="line">                out.recycle();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when the input of the channel was closed which may be because it changed to inactive or because of</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ChannelInputShutdownEvent}.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelInputClosed</span><span class="params">(ChannelHandlerContext ctx, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (cumulation != <span class="keyword">null</span>) {</span><br><span class="line">            callDecode(ctx, cumulation, out);</span><br><span class="line">            <span class="comment">// If callDecode(...) removed the handle from the pipeline we should not call decodeLast(...) as this would</span></span><br><span class="line">            <span class="comment">// be unexpected.</span></span><br><span class="line">            <span class="keyword">if</span> (!ctx.isRemoved()) {</span><br><span class="line">                <span class="comment">// Use Unpooled.EMPTY_BUFFER if cumulation become null after calling callDecode(...).</span></span><br><span class="line">                <span class="comment">// See https://github.com/netty/netty/issues/10802.</span></span><br><span class="line">                ByteBuf buffer = cumulation == <span class="keyword">null</span> ? Unpooled.EMPTY_BUFFER : cumulation;</span><br><span class="line">                decodeLast(ctx, buffer, out);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            decodeLast(ctx, Unpooled.EMPTY_BUFFER, out);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ByteBuf解码方法, 该方法将会调用decode(ChannelHandlerContext, ByteBuf, List)做真正的解码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx           属于该Handler的ChannelHandlerContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in            the {<span class="doctag">@link</span> ByteBuf} from which to read data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out           the {<span class="doctag">@link</span> List} to which decoded messages should be added</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">callDecode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (in.isReadable()) {</span><br><span class="line">                <span class="keyword">int</span> outSize = out.size();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 先消费消息, 当消息条数&gt;0</span></span><br><span class="line">                <span class="keyword">if</span> (outSize &gt; <span class="number">0</span>) {</span><br><span class="line">                    fireChannelRead(ctx, out, outSize);</span><br><span class="line">                    out.clear();</span><br><span class="line">                    <span class="keyword">if</span> (ctx.isRemoved()) {</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    outSize = <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> oldInputLength = in.readableBytes();</span><br><span class="line">                <span class="comment">// 下面方法中调用真正的解码方法, 将字节码解码成消息追加到out中</span></span><br><span class="line">                decodeRemovalReentryProtection(ctx, in, out);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Handler已经被移除</span></span><br><span class="line">                <span class="keyword">if</span> (ctx.isRemoved()) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果一个消息都解码不出来, 则方法返回</span></span><br><span class="line">                <span class="keyword">if</span> (outSize == out.size()) {</span><br><span class="line">                    <span class="keyword">if</span> (oldInputLength == in.readableBytes()) {</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (oldInputLength == in.readableBytes()) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> DecoderException(</span><br><span class="line">                            StringUtil.simpleClassName(getClass()) +</span><br><span class="line">                                    <span class="string">".decode() did not read anything but decoded a message."</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是单解码, 则该解码器解码一条消息后就方法返回</span></span><br><span class="line">                <span class="keyword">if</span> (isSingleDecode()) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (DecoderException e) {</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception cause) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DecoderException(cause);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode the from one {<span class="doctag">@link</span> ByteBuf} to an other. This method will be called till either the input</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ByteBuf} has nothing to read when return from this method or till nothing was read from the input</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ByteBuf}.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx           the {<span class="doctag">@link</span> ChannelHandlerContext} which this {<span class="doctag">@link</span> ByteToMessageDecoder} belongs to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in            the {<span class="doctag">@link</span> ByteBuf} from which to read data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out           the {<span class="doctag">@link</span> List} to which decoded messages should be added</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception    is thrown if an error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将ByteBuf转换成另一个消息, 直到ByteBuf不能解码出一个完整的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx           the {<span class="doctag">@link</span> ChannelHandlerContext} which this {<span class="doctag">@link</span> ByteToMessageDecoder} belongs to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in            the {<span class="doctag">@link</span> ByteBuf} from which to read data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out           the {<span class="doctag">@link</span> List} to which decoded messages should be added</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception    is thrown if an error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">decodeRemovalReentryProtection</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 设置解码状态, 在解码时, 该解码器不能被执行handlerRemoved(ChannelHandlerContext ctx)</span></span><br><span class="line">        decodeState = STATE_CALLING_CHILD_DECODE;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            decode(ctx, in, out);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">boolean</span> removePending = decodeState == STATE_HANDLER_REMOVED_PENDING;</span><br><span class="line">            decodeState = STATE_INIT;</span><br><span class="line">            <span class="keyword">if</span> (removePending) {</span><br><span class="line">                <span class="comment">// 如果该解码器需要被Removed, 直接消费消息后将该解码器移除</span></span><br><span class="line">                fireChannelRead(ctx, out, out.size());</span><br><span class="line">                out.clear();</span><br><span class="line">                handlerRemoved(ctx);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Is called one last time when the {<span class="doctag">@link</span> ChannelHandlerContext} goes in-active. Which means the</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> #channelInactive(ChannelHandlerContext)} was triggered.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * By default this will just call {<span class="doctag">@link</span> #decode(ChannelHandlerContext, ByteBuf, List)} but sub-classes may</span></span><br><span class="line"><span class="comment">     * override this for some special cleanup operation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decodeLast</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (in.isReadable()) {</span><br><span class="line">            <span class="comment">// Only call decode() if there is something left in the buffer to decode.</span></span><br><span class="line">            <span class="comment">// See https://github.com/netty/netty/issues/4386</span></span><br><span class="line">            decodeRemovalReentryProtection(ctx, in, out);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ByteBuf <span class="title">expandCumulation</span><span class="params">(ByteBufAllocator alloc, ByteBuf oldCumulation, ByteBuf in)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> oldBytes = oldCumulation.readableBytes();</span><br><span class="line">        <span class="keyword">int</span> newBytes = in.readableBytes();</span><br><span class="line">        <span class="keyword">int</span> totalBytes = oldBytes + newBytes;</span><br><span class="line">        ByteBuf newCumulation = alloc.buffer(alloc.calculateNewCapacity(totalBytes, MAX_VALUE));</span><br><span class="line">        ByteBuf toRelease = newCumulation;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// This avoids redundant checks and stack depth compared to calling writeBytes(...)</span></span><br><span class="line">            newCumulation.setBytes(<span class="number">0</span>, oldCumulation, oldCumulation.readerIndex(), oldBytes)</span><br><span class="line">                .setBytes(oldBytes, in, in.readerIndex(), newBytes)</span><br><span class="line">                .writerIndex(totalBytes);</span><br><span class="line">            in.readerIndex(in.writerIndex());</span><br><span class="line">            toRelease = oldCumulation;</span><br><span class="line">            <span class="keyword">return</span> newCumulation;</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            toRelease.release();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cumulate {<span class="doctag">@link</span> ByteBuf}s.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cumulator</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Cumulate the given {<span class="doctag">@link</span> ByteBuf}s and return the {<span class="doctag">@link</span> ByteBuf} that holds the cumulated bytes.</span></span><br><span class="line"><span class="comment">         * The implementation is responsible to correctly handle the life-cycle of the given {<span class="doctag">@link</span> ByteBuf}s and so</span></span><br><span class="line"><span class="comment">         * call {<span class="doctag">@link</span> ByteBuf#release()} if a {<span class="doctag">@link</span> ByteBuf} is fully consumed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function">ByteBuf <span class="title">cumulate</span><span class="params">(ByteBufAllocator alloc, ByteBuf cumulation, ByteBuf in)</span></span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="MessageToMessageDecoder解码器"><a href="#MessageToMessageDecoder解码器" class="headerlink" title="MessageToMessageDecoder解码器"></a>MessageToMessageDecoder解码器</h3><blockquote><p>另一个重要的解码器</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageToMessageDecoder</span>&lt;<span class="title">I</span>&gt; <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeParameterMatcher matcher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建该解码器的参数匹配器, 当入参和该类申明的入栈消息格式一致将传递到解码器, 否则直接跳过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MessageToMessageDecoder</span><span class="params">()</span> </span>{</span><br><span class="line">        matcher = TypeParameterMatcher.find(<span class="keyword">this</span>, MessageToMessageDecoder.class, <span class="string">"I"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inboundMessageType    The type of messages to match and so decode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MessageToMessageDecoder</span><span class="params">(Class&lt;? extends I&gt; inboundMessageType)</span> </span>{</span><br><span class="line">        matcher = TypeParameterMatcher.get(inboundMessageType);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该入栈消息是否能进入该解码器进行解码 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ChannelInboundHandler} in the {<span class="doctag">@link</span> ChannelPipeline}.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acceptInboundMessage</span><span class="params">(Object msg)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> matcher.match(msg);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        CodecOutputList out = CodecOutputList.newInstance();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (acceptInboundMessage(msg)) {</span><br><span class="line">                <span class="meta">@SuppressWarnings("unchecked")</span></span><br><span class="line">                I cast = (I) msg;</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    decode(ctx, cast, out);</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    <span class="comment">// 释放前解码器的消息引用</span></span><br><span class="line">                    ReferenceCountUtil.release(cast);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                out.add(msg);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (DecoderException e) {</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DecoderException(e);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">int</span> size = out.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                    ctx.fireChannelRead(out.getUnsafe(i));</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                out.recycle();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode from one message to an other. This method will be called for each written message that can be handled</span></span><br><span class="line"><span class="comment">     * by this decoder.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx           the {<span class="doctag">@link</span> ChannelHandlerContext} which this {<span class="doctag">@link</span> MessageToMessageDecoder} belongs to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg           the message to decode to an other one</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out           the {<span class="doctag">@link</span> List} to which decoded messages should be added</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception    is thrown if an error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, I msg, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty Decoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NioEventLoopGroup和NioEventLoop的工作流程</title>
      <link href="2021/06/04/netty-shi-jian-lun-xun-qi/"/>
      <url>2021/06/04/netty-shi-jian-lun-xun-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="NioEventLoopGroup"><a href="#NioEventLoopGroup" class="headerlink" title="NioEventLoopGroup"></a>NioEventLoopGroup</h3><p><img src="https://inus-markdown.oss-cn-beijing.aliyuncs.com/img/20201224112405121.png" alt="NioEventLoopGroup类继承关系"></p><blockquote><p><code>EventExecutorGroup</code> 主要职责是管理和治理所属的 <code>EventExecutor</code> , 通过 <code>next()</code> 获取下一个 <code>EventExecutor</code> 执行器执行提交的事件, 本质就是线程池</p><p><code>AbstractEventExecutorGroup</code> 是 <code>EventExecutorGroup</code> 抽象实现类,  主题功能基本实现, <code>next()</code> 和 <code>shutdown相关</code> 交给具体的实现类来实现</p><p><code>MultithreadEventExecutorGroup</code> 是 <code>AbstractEventExecutorGroup</code> 继承类, 职责和 <code>EventExecutorGroup</code>, 内部定义了 <code>newChild</code> 创建被治理的 <code>EventExecutor</code> 的方法, 该事件执行组各个执行主要是 <code>EventExecutor</code></p><p><code>MultithreadEventLoopGroup</code> 是 <code>MultithreadEventExecutorGroup</code> 继承类, 执行真正执行者是 <code>EventLoop</code> </p><p><code>NioEventLoopGroup</code> 主要职责是 <code>EventLoop</code> 是治理, 定义创建被治理的 <code>EventLoop</code> 方法</p></blockquote><blockquote><p><code>EventExecutorGroup</code> 本质就是线程池, 治理事件执行器, 包括事件执行器的创建, 关闭和分配事件执行</p></blockquote><h4 id="NioEventLoopGroup是如何初始化NioEventLoop线程组的"><a href="#NioEventLoopGroup是如何初始化NioEventLoop线程组的" class="headerlink" title="NioEventLoopGroup是如何初始化NioEventLoop线程组的"></a>NioEventLoopGroup是如何初始化NioEventLoop线程组的</h4><blockquote><p><code>NioEventLoop</code> 的父类 <code>SingleThreadEventExecutor</code> 中方法 <code>execute(Runnable task)</code> 就是线程执行任务的方法</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>{</span><br><span class="line">    ObjectUtil.checkNotNull(task, <span class="string">"task"</span>);</span><br><span class="line">    <span class="comment">// 执行指定任务</span></span><br><span class="line">    execute(task, !(task <span class="keyword">instanceof</span> LazyRunnable) &amp;&amp; wakesUpForTask(task));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">boolean</span> immediate)</span> </span>{</span><br><span class="line">    <span class="keyword">boolean</span> inEventLoop = inEventLoop();<span class="comment">// 检查当前线程是否是NioEventLoop的线程</span></span><br><span class="line">    addTask(task);<span class="comment">// 添加任务</span></span><br><span class="line">    <span class="keyword">if</span> (!inEventLoop) {</span><br><span class="line">        startThread();<span class="comment">// 开始线程, 看下面该方法的具体实现</span></span><br><span class="line">        <span class="keyword">if</span> (isShutdown()) {</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唤醒线程立即执行</span></span><br><span class="line">    <span class="keyword">if</span> (!addTaskWakesUp &amp;&amp; immediate) {</span><br><span class="line">        wakeup(inEventLoop);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (state == ST_NOT_STARTED) {<span class="comment">// 线程未启动, 设置标志位, 启动线程</span></span><br><span class="line">        <span class="keyword">if</span> (STATE_UPDATER.compareAndSet(<span class="keyword">this</span>, ST_NOT_STARTED, ST_STARTED)) {</span><br><span class="line">            <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                doStartThread();<span class="comment">// 下面是该方法的具体实现</span></span><br><span class="line">                success = <span class="keyword">true</span>;</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 启动失败, 重置标志位</span></span><br><span class="line">                <span class="keyword">if</span> (!success) {</span><br><span class="line">                    STATE_UPDATER.compareAndSet(<span class="keyword">this</span>, ST_STARTED, ST_NOT_STARTED);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doStartThread</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">assert</span> thread == <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 该处是如何创建线程并执行的, 看下面的代码</span></span><br><span class="line">    executor.execute(<span class="keyword">new</span> Runnable() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            thread = Thread.currentThread();</span><br><span class="line">            <span class="keyword">if</span> (interrupted) {</span><br><span class="line">                thread.interrupt();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">            updateLastExecutionTime();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 单例线程池执行run()方法, 该方法就是NioEventLoop中定义的run方法, 线程启动完毕</span></span><br><span class="line">                SingleThreadEventExecutor.<span class="keyword">this</span>.run();</span><br><span class="line">                success = <span class="keyword">true</span>;</span><br><span class="line">            } <span class="keyword">catch</span> (Throwable t) {</span><br><span class="line">                logger.warn(<span class="string">"Unexpected exception from an event executor: "</span>, t);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                ... </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化NioEventLoopGroup时, 构建MultithreadEventExecutorGroup对象时有下面的一段代码</span></span><br><span class="line"><span class="keyword">if</span> (executor == <span class="keyword">null</span>) {</span><br><span class="line">    <span class="comment">// 构造线程单任务执行器, 该线程自始至终值运行一个方法的执行器</span></span><br><span class="line">    executor = <span class="keyword">new</span> ThreadPerTaskExecutor(newDefaultThreadFactory());</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 看一下线程工厂DefaultThreadFactory创建新线程的代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">    <span class="comment">// 创建新的线程</span></span><br><span class="line">    Thread t = newThread(FastThreadLocalRunnable.wrap(r), prefix + nextId.incrementAndGet());</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon() != daemon) {</span><br><span class="line">            t.setDaemon(daemon);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != priority) {</span><br><span class="line">            t.setPriority(priority);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (Exception ignored) {</span><br><span class="line">        <span class="comment">// Doesn't matter even if failed to set.</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="NioEventLoop"><a href="#NioEventLoop" class="headerlink" title="NioEventLoop"></a>NioEventLoop</h3><p><img src="https://inus-markdown.oss-cn-beijing.aliyuncs.com/img/2020070416155161.png" alt="NioEventLoop继承关系图"></p><blockquote><p><code>NioEventLoop</code> 是事件真正的 <code>NioEvent</code> 执行者</p></blockquote><blockquote><p><code>Netty</code>中每创建一个<code>Channel</code>都会连带创建一个<code>ChannelPipeline</code> 和 <code>Netty的Unsafe</code>, 主要是拦截<code>Nio</code>事件和处理<code>Channel</code>的<code>IO</code>数据</p></blockquote><p><code>NioServerSocketChannel</code> 内部都包含一个单独的多路复用器 <code>SelectorProvider</code>, <code>SelectorProvider</code> 是nio的java原生类, 主要职责是创建多路复用器和Channel, 具体代码如下</p><p><img src="http://inus-markdown.oss-cn-beijing.aliyuncs.com/img/image-20210603113004202.png" alt="image-20210603113004202"></p><p><code>NioEventLoop</code> 中定义的<code>run()</code> 是当前线程事件轮询器的主要执行的方法, 具体执行的代码如如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> selectCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">int</span> strategy;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 计算执行策略, 如果队列中还有任务, 则执行任务, 无任务则SELECT等待任务</span></span><br><span class="line">                strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());</span><br><span class="line">                <span class="keyword">switch</span> (strategy) {</span><br><span class="line">                    <span class="keyword">case</span> SelectStrategy.CONTINUE:</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> SelectStrategy.BUSY_WAIT:</span><br><span class="line">                        <span class="comment">// fall-through to SELECT since the busy-wait is not supported with NIO</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> SelectStrategy.SELECT:</span><br><span class="line">                        <span class="comment">// 阻塞等待IO事件</span></span><br><span class="line">                        <span class="keyword">long</span> curDeadlineNanos = nextScheduledTaskDeadlineNanos();</span><br><span class="line">                        <span class="keyword">if</span> (curDeadlineNanos == -<span class="number">1L</span>) {</span><br><span class="line">                            curDeadlineNanos = NONE; <span class="comment">// nothing on the calendar</span></span><br><span class="line">                        }</span><br><span class="line">                        nextWakeupNanos.set(curDeadlineNanos);</span><br><span class="line">                        <span class="keyword">try</span> {</span><br><span class="line">                            <span class="keyword">if</span> (!hasTasks()) {</span><br><span class="line">                                strategy = select(curDeadlineNanos);</span><br><span class="line">                            }</span><br><span class="line">                        } <span class="keyword">finally</span> {</span><br><span class="line">                            <span class="comment">// This update is just to help block unnecessary selector wakeups</span></span><br><span class="line">                            <span class="comment">// so use of lazySet is ok (no race condition)</span></span><br><span class="line">                            nextWakeupNanos.lazySet(AWAKE);</span><br><span class="line">                        }</span><br><span class="line">                        <span class="comment">// fall through</span></span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                <span class="comment">// If we receive an IOException here its because the Selector is messed up. Let's rebuild</span></span><br><span class="line">                <span class="comment">// the selector and retry. https://github.com/netty/netty/issues/8566</span></span><br><span class="line">                rebuildSelector0();</span><br><span class="line">                selectCnt = <span class="number">0</span>;</span><br><span class="line">                handleLoopException(e);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            selectCnt++;</span><br><span class="line">            cancelledKeys = <span class="number">0</span>;</span><br><span class="line">            needsToSelectAgain = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> ioRatio = <span class="keyword">this</span>.ioRatio;</span><br><span class="line">            <span class="keyword">boolean</span> ranTasks;</span><br><span class="line">            <span class="keyword">if</span> (ioRatio == <span class="number">100</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">if</span> (strategy &gt; <span class="number">0</span>) {</span><br><span class="line">                        <span class="comment">// 优先处理io任务</span></span><br><span class="line">                        processSelectedKeys();</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    <span class="comment">// 执行非io任务</span></span><br><span class="line">                    ranTasks = runAllTasks();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (strategy &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// io开始时间</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> ioStartTime = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    <span class="comment">// io结束时间</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                    <span class="comment">// 按照比例执行非io任务</span></span><br><span class="line">                    ranTasks = runAllTasks(ioTime * (<span class="number">100</span> - ioRatio) / ioRatio);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 没有io任务, 全力执行非io任务</span></span><br><span class="line">                ranTasks = runAllTasks(<span class="number">0</span>); <span class="comment">// This will run the minimum number of tasks</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ranTasks || strategy &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS &amp;&amp; logger.isDebugEnabled()) {</span><br><span class="line">                    logger.debug(<span class="string">"Selector.select() returned prematurely {} times in a row for Selector {}."</span>, selectCnt - <span class="number">1</span>, selector);</span><br><span class="line">                }</span><br><span class="line">                selectCnt = <span class="number">0</span>;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (unexpectedSelectorWakeup(selectCnt)) { <span class="comment">// Unexpected wakeup (unusual case)</span></span><br><span class="line">                selectCnt = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (CancelledKeyException e) {</span><br><span class="line">            <span class="comment">// Harmless exception - log anyway</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">                logger.debug(CancelledKeyException.class.getSimpleName() + <span class="string">" raised by a Selector {} - JDK bug?"</span>, selector, e);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Error e) {</span><br><span class="line">            <span class="keyword">throw</span> (Error) e;</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable t) {</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">// Always handle shutdown even if the loop processing threw an exception.</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (isShuttingDown()) {</span><br><span class="line">                    closeAll();</span><br><span class="line">                    <span class="keyword">if</span> (confirmShutdown()) {</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (Error e) {</span><br><span class="line">                <span class="keyword">throw</span> (Error) e;</span><br><span class="line">            } <span class="keyword">catch</span> (Throwable t) {</span><br><span class="line">                handleLoopException(t);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="NioEventLoop中是如何处理io事件的"><a href="#NioEventLoop中是如何处理io事件的" class="headerlink" title="NioEventLoop中是如何处理io事件的"></a>NioEventLoop中是如何处理io事件的</h4><p>重点看该类的中的下面一段代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSelectedKey</span><span class="params">(SelectionKey k, AbstractNioChannel ch)</span> </span>{</span><br><span class="line">    <span class="comment">// 每个Channel中都存在一个Netty的Unsafe, 该处返回的是NioMessageUnsafe, 主要值处理io事件</span></span><br><span class="line">    <span class="keyword">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();</span><br><span class="line">    <span class="keyword">if</span> (!k.isValid()) {</span><br><span class="line">        <span class="keyword">final</span> EventLoop eventLoop;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            eventLoop = ch.eventLoop();</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable ignored) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop</span></span><br><span class="line">        <span class="comment">// and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is</span></span><br><span class="line">        <span class="comment">// still healthy and should not be closed.</span></span><br><span class="line">        <span class="comment">// See https://github.com/netty/netty/issues/5125</span></span><br><span class="line">        <span class="keyword">if</span> (eventLoop == <span class="keyword">this</span>) {</span><br><span class="line">            <span class="comment">// close the channel if the key is not valid anymore</span></span><br><span class="line">            unsafe.close(unsafe.voidPromise());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">int</span> readyOps = k.readyOps();</span><br><span class="line">        <span class="comment">// 连接事件</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span></span><br><span class="line">            <span class="comment">// See https://github.com/netty/netty/issues/924</span></span><br><span class="line">            <span class="keyword">int</span> ops = k.interestOps();</span><br><span class="line">            ops &amp;= ~SelectionKey.OP_CONNECT;</span><br><span class="line">            k.interestOps(ops);</span><br><span class="line"></span><br><span class="line">            unsafe.finishConnect();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process OP_WRITE first as we may be able to write some queued buffers and so free memory.</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// 写Channel</span></span><br><span class="line">            ch.unsafe().forceFlush();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读Channel</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class="number">0</span> || readyOps == <span class="number">0</span>) {</span><br><span class="line">            unsafe.read();<span class="comment">// 该方法中会触发pipeline.fireChannelRead(readBuf.get(i));事件, 随后事件进入ChannelPipeline中进行链式传播</span></span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (CancelledKeyException ignored) {</span><br><span class="line">        unsafe.close(unsafe.voidPromise());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="DefaultChannelPipeline是如何传播io事件的"><a href="#DefaultChannelPipeline是如何传播io事件的" class="headerlink" title="DefaultChannelPipeline是如何传播io事件的"></a>DefaultChannelPipeline是如何传播io事件的</h4><p>着重看用下面的一段代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>{</span><br><span class="line">    <span class="comment">// 头指针</span></span><br><span class="line">    <span class="keyword">final</span> AbstractChannelHandlerContext head;</span><br><span class="line">    <span class="comment">// 尾指针</span></span><br><span class="line">    <span class="keyword">final</span> AbstractChannelHandlerContext tail;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">fireChannelRead</span><span class="params">(Object msg)</span> </span>{</span><br><span class="line">        <span class="comment">// 将消息传播到head context中进行处理, 后面的Context中的handler需要主动调用ctx.fireChannelRead(msg);向下传播消息</span></span><br><span class="line">        AbstractChannelHandlerContext.invokeChannelRead(head, msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelFuture <span class="title">write</span><span class="params">(Object msg)</span> </span>{</span><br><span class="line">        <span class="comment">// 出栈消息是从尾部向前传播</span></span><br><span class="line">        <span class="keyword">return</span> tail.write(msg);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NioEventLoop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
